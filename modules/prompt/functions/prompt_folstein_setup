#
# Features:
# * Multi-color prompt and context aware bits adapted form Sorin
# * Two line layout
# * Powerline-like styling but with easy-greys
# * VCSH aware, shows repo in segment before git info
#
# Author:
#   Steven Folstein
#
# Adapten from Sorin and Paradox themes:
#   https://github.com/sorin-ionescu/prezto/blob/master/modules/prompt/functions/prompt_sorin_setup
#   https://github.com/paradox460/prezto/blob/paradox/modules/prompt/functions/prompt_paradox_setup
#
# Screenshot:
#   http://i.imgur.com/hXO1e5A.png
#

# Load dependencies.
pmodload 'helper'
pmodload 'spectrum'

SEGMENT_SEPARATOR=''
SEGMENT_DIVIDER=''

CURRENT_BG='NONE'

# Begin a segment, takes three arguments: background, foreground, and content
# Color options are all 256 term colors via the spectrum module.
prompt_folstein_segment() {
  local bg fg sg
  [[ -n $1 ]] && bg="$BG[$1]" && sg="$FG[$CURRENT_BG]"
  [[ -n $2 ]] && fg="$FG[$2]"
  if [[ $CURRENT_BG != 'NONE' ]]; then
    if [[ $1 != $CURRENT_BG ]]; then
      echo -n " %{$bg$sg%}$SEGMENT_SEPARATOR%{$fg%} "
    else
      echo -n " $SEGMENT_DIVIDER "
    fi
  else
    echo -n "%{$bg$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && print -n $3
}

# Shrink PWD down no a managable size (agressive)
function prompt_folstein_pwd {
  local pwd="${PWD/#$HOME/~}"

  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_folstein_pwd="$MATCH"
    unset MATCH
  else
    _prompt_folstein_pwd="${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}/${pwd:t}"
  fi
}

# End the prompt, closing any open segments
prompt_folstein_end() {
  if [[ -n $CURRENT_BG ]]; then
    sg="$FG[$CURRENT_BG]"
    echo -n " %{%k$sg%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}

# Assemble the segments
function prompt_folstein_build {
  # Flags for privileged shell and running jobs
  #prompt_folstein_segment 233 yellow '%(!;⚡ ;)%(1j;%j⚙ ;)'
  # Username
  prompt_folstein_segment 235 241 '%n'
  # Short hostname
  prompt_folstein_segment 237 243 '%m'
  # The pwd we pre-formatted
  prompt_folstein_segment 239 232 "${_prompt_folstein_pwd}"
  # If set, the name of the current VCSH repo
  #[[ -n $VCSH_REPO_NAME ]] && prompt_folstein_segment red black "$VCSH_REPO_NAME"

  # Git-info stuff
  if $git_status; then
    prompt_folstein_segment 241 232 "${git_info[status]}${(e)git_info[prompt]}"
  fi

  # Closing
  prompt_folstein_end
}

start_time=$SECONDS
function prompt_folstein_preexec {
  start_time=$SECONDS
}

# Do some maths to break down a seconds figure into a human readable time
function calc_elapsed_time {
  if [[ $timer_result -ge 3600 ]]; then
    let "timer_hours = $timer_result / 3600"
    let "remainder = $timer_result % 3600"
    let "timer_minutes = $remainder / 60"
    let "timer_seconds = $remainder % 60"
    print -P "%B%F{red}>>> elapsed time ${timer_hours}h${timer_minutes}m${timer_seconds}s%b"
  elif [[ $timer_result -ge 60 ]]; then
    let "timer_minutes = $timer_result / 60"
    let "timer_seconds = $timer_result % 60"
    print -P "%B%F{yellow}>>> elapsed time ${timer_minutes}m${timer_seconds}s%b"
  elif [[ $timer_result -gt 10 ]]; then
    print -P "%B%F{green}>>> elapsed time ${timer_result}s%b"
  fi
}

function prompt_folstein_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  prompt_folstein_pwd

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git_status=git-info
  fi
  timer_result=$(($SECONDS-$start_time))
  if [[ $timer_result -gt 10 ]]; then
    calc_elapsed_time
  fi
  start_time=$SECONDS
}

function prompt_folstein_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook preexec prompt_folstein_preexec
  add-zsh-hook precmd prompt_folstein_precmd

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{red}❯%F{yellow}❯%F{green}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{green}❮%F{yellow}❮%F{red}❮%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format '! %s '
  zstyle ':prezto:module:git:info:added' format '✚ '
  zstyle ':prezto:module:git:info:ahead' format '⬆ '
  zstyle ':prezto:module:git:info:behind' format '⬇ '
  zstyle ':prezto:module:git:info:branch' format ' %b'
  zstyle ':prezto:module:git:info:commit' format '➦ %.7c '
  zstyle ':prezto:module:git:info:deleted' format '✖ '
  zstyle ':prezto:module:git:info:modified' format '✱ '
  zstyle ':prezto:module:git:info:position' format '%p '
  zstyle ':prezto:module:git:info:renamed' format '➙ '
  zstyle ':prezto:module:git:info:stashed' format ' ★'
  zstyle ':prezto:module:git:info:unmerged' format '═ '
  zstyle ':prezto:module:git:info:untracked' format '◼ '
  zstyle ':prezto:module:git:info:keys' format \
    'prompt' '$(coalesce "%b" "%p" "%c")%s%S' \
    'status' '%A%B%a%d%m%r%U%u'

  # Define prompts.
  PROMPT='$(prompt_folstein_build)
${editor_info[keymap]} '
  #RPROMPT='${editor_info[overwrite]}%(?:: %F{red}⏎%f)${VIM:+" %B%F{green}V%f%b"}${git_info[rprompt]}'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_folstein_setup "$@"


